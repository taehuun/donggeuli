def component = [
        front: false,
        nginx: true,
        redis: true,
        back: true
]
pipeline {
    agent any
    environment {
        REPO = "s10-ai-image-sub2/S10P22C101"
        USERNAME = "${env.DB_USER}"
        DB_PASSWORD = "${env.DB_PASSWORD}"
        JWT_SECRET = "${env.JWT_SECRET}"
        REDIS_HOST = "${env.REDIS_HOST}"
        REDIS_PASSWORD = "${env.REDIS_PASSWORD}"
        REDIS_PORT = "${env.REDIS_PORT}"
        S3_ACCESS_KEY = "${env.S3_ACCESS_KEY}"
        S3_SECRET_KEY = "${env.S3_SECRET_KEY}"
        S3_BUCKET = "${env.S3_BUCKET}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/backend"){
                    script {
                        sh "ls -al"
                        sh "echo 'SUBMODULE CHECK'"
//                         sh "ls secure-settings -al"
//                         sh "ls ./src/main/resources"
//                         sh "chmod +x ./gradlew"
//                         sh "cat ./src/main/resources/application.yml"
                    }
                }
            }
        }
        stage('Add Env') {
            steps {
                dir("${env.WORKSPACE}/backend") {
                    withCredentials([file(credentialsId: 'application', variable: 'application')]) {
                       sh "cp ${application}  backend/src/main/resources/application.yml"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "ls -al"
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         sh "docker stop back || true"  // Ignore error ifgit  container doesn't exist
//                         sh "docker rm back || true"    // Ignore error if container doesn't exist
//                         sh "docker rmi xogns5/back"     //images 날리기
//                             echo "도커허브 아이디: ${DOCKER_USER_ID}"
//                             echo "도커허브 비밀번호: ${DOCKER_USER_PASSWORD}"
                        sh "docker build --no-cache -t ${DOCKER_USER_ID}/back backend"
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKER_USER_ID}/back"
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker ps"
//                     sh "docker system prune --filter until=1h"
                }
            }
        }
        
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker stop back || true"  // Ignore error ifgit  container doesn't exist
                        sh "docker rm back || true"    // Ignore error if container doesn't exist
                        sh "docker rmi xogns5/back"     //images 날리기
                    }
                }
            }
        }
//         stage('Up') {
//             steps {
//                 script {
//                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         try{
//                         sh "docker stop back"
//                         sh "docker rm back"
//                         sh "docker run -d --name back -p 8082:8080 -e spring.datasource.username=${USERNAME} ${DB_PASSWORD} ${JWT_SECRET} ${DOCKER_USER_ID}/back"
//                         } catch(Exception e){
//                             sh "docker restart back"
//                         }
//                     }
//                 }
//             }
//         }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-Hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try {

                            sh "docker run -d --name back -p 8082:8080 \
                                -e spring.datasource.username=${USERNAME} \
                                -e DB_PASSWORD=${DB_PASSWORD} \
                                -e JWT_SECRET=${JWT_SECRET} \
                                -e REDIS_HOST=${REDIS_HOST} \
                                -e REDIS_PASSWORD=${REDIS_PASSWORD} \
                                -e REDIS_PORT=${REDIS_PORT} \
                                -e S3_ACCESS_KEY=${S3_ACCESS_KEY} \
                                -e S3_SECRET_KEY=${S3_SECRET_KEY} \
                                -e S3_BUCKET=${S3_BUCKET} \
                                ${DOCKER_USER_ID}/back"
                        } catch(Exception e) {
                            sh "docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }
    }

//     post {
//         always {
//             script {
//                 def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
//                 def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
//                 mattermostSend (color: 'good',
//                     message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
//                     endpoint: 'https://meeting.ssafy.com/hooks/q4qjarpscbf9pme4f46yiojzfe',
//                     channel: 'C204-Jenkins'
//                 )
//             }
//         }
//     }
}